{"ast":null,"code":"import Data from \"./data\";\nexport function get(endpoint) {\n  // const delay = Math.floor(Math.random() * 1000) + 300;\n  const delay = Math.floor(Math.random() * 100) + 10;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (!Data.hasOwnProperty(endpoint)) {\n        const validEndpoints = Object.keys(Data).map(endpoint => ` - \"${endpoint}\"`).join(\"\\n \");\n        reject(`\"${endpoint}\" is an invalid endpoint. Try getting data from: \\n ${validEndpoints}`);\n      } // console.log(Data[endpoint]);\n\n\n      const response = {\n        status: 200,\n        data: Data[endpoint]\n      };\n      resolve(response);\n    }, delay);\n  });\n}","map":{"version":3,"sources":["C:/Users/Admin/Documents/GitHub/mvagustamotorsss/src/backend/fetchApi.js"],"names":["Data","get","endpoint","delay","Math","floor","random","Promise","resolve","reject","setTimeout","hasOwnProperty","validEndpoints","Object","keys","map","join","response","status","data"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AAEA,OAAO,SAASC,GAAT,CAAaC,QAAb,EAAsB;AAC3B;AACA,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,GAA3B,IAAkC,EAAhD;AACA,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,IAAAA,UAAU,CAAC,MAAM;AACf,UAAI,CAACV,IAAI,CAACW,cAAL,CAAoBT,QAApB,CAAL,EAAoC;AAClC,cAAMU,cAAc,GAAGC,MAAM,CAACC,IAAP,CAAYd,IAAZ,EACpBe,GADoB,CACfb,QAAD,IAAe,OAAMA,QAAS,GADd,EAEpBc,IAFoB,CAEf,KAFe,CAAvB;AAGAP,QAAAA,MAAM,CACH,IAAGP,QAAS,uDAAsDU,cAAe,EAD9E,CAAN;AAGD,OARc,CASf;;;AAEA,YAAMK,QAAQ,GAAG;AAAEC,QAAAA,MAAM,EAAE,GAAV;AAAeC,QAAAA,IAAI,EAAEnB,IAAI,CAACE,QAAD;AAAzB,OAAjB;AAEAM,MAAAA,OAAO,CAACS,QAAD,CAAP;AACD,KAdS,EAcPd,KAdO,CAAV;AAeD,GAhBM,CAAP;AAiBD","sourcesContent":["import Data from \"./data\";\r\n\r\nexport function get(endpoint){\r\n  // const delay = Math.floor(Math.random() * 1000) + 300;\r\n  const delay = Math.floor(Math.random() * 100) + 10;\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (!Data.hasOwnProperty(endpoint)) {\r\n        const validEndpoints = Object.keys(Data)\r\n          .map((endpoint) => ` - \"${endpoint}\"`)\r\n          .join(\"\\n \");\r\n        reject(\r\n          `\"${endpoint}\" is an invalid endpoint. Try getting data from: \\n ${validEndpoints}`\r\n        );\r\n      }\r\n      // console.log(Data[endpoint]);\r\n\r\n      const response = { status: 200, data: Data[endpoint] };\r\n\r\n      resolve(response);\r\n    }, delay);\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}