{"ast":null,"code":"import Data from\"./data\";export function get(endpoint){// const delay = Math.floor(Math.random() * 1000) + 300;\nvar delay=Math.floor(Math.random()*100)+10;return new Promise(function(resolve,reject){setTimeout(function(){if(!Data.hasOwnProperty(endpoint)){var validEndpoints=Object.keys(Data).map(function(endpoint){return\" - \\\"\".concat(endpoint,\"\\\"\");}).join(\"\\n \");reject(\"\\\"\".concat(endpoint,\"\\\" is an invalid endpoint. Try getting data from: \\n \").concat(validEndpoints));}// console.log(Data[endpoint]);\nvar response={status:200,data:Data[endpoint]};resolve(response);},delay);});}","map":{"version":3,"sources":["D:/Github/mvagustamotorsss/src/backend/fetchApi.js"],"names":["Data","get","endpoint","delay","Math","floor","random","Promise","resolve","reject","setTimeout","hasOwnProperty","validEndpoints","Object","keys","map","join","response","status","data"],"mappings":"AAAA,MAAOA,CAAAA,IAAP,KAAiB,QAAjB,CAEA,MAAO,SAASC,CAAAA,GAAT,CAAaC,QAAb,CAAsB,CAC3B;AACA,GAAMC,CAAAA,KAAK,CAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,GAAgB,GAA3B,EAAkC,EAAhD,CACA,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtCC,UAAU,CAAC,UAAM,CACf,GAAI,CAACV,IAAI,CAACW,cAAL,CAAoBT,QAApB,CAAL,CAAoC,CAClC,GAAMU,CAAAA,cAAc,CAAGC,MAAM,CAACC,IAAP,CAAYd,IAAZ,EACpBe,GADoB,CAChB,SAACb,QAAD,uBAAqBA,QAArB,QADgB,EAEpBc,IAFoB,CAEf,KAFe,CAAvB,CAGAP,MAAM,aACAP,QADA,iEAC+DU,cAD/D,EAAN,CAGD,CACD;AAEA,GAAMK,CAAAA,QAAQ,CAAG,CAAEC,MAAM,CAAE,GAAV,CAAeC,IAAI,CAAEnB,IAAI,CAACE,QAAD,CAAzB,CAAjB,CAEAM,OAAO,CAACS,QAAD,CAAP,CACD,CAdS,CAcPd,KAdO,CAAV,CAeD,CAhBM,CAAP,CAiBD","sourcesContent":["import Data from \"./data\";\r\n\r\nexport function get(endpoint){\r\n  // const delay = Math.floor(Math.random() * 1000) + 300;\r\n  const delay = Math.floor(Math.random() * 100) + 10;\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (!Data.hasOwnProperty(endpoint)) {\r\n        const validEndpoints = Object.keys(Data)\r\n          .map((endpoint) => ` - \"${endpoint}\"`)\r\n          .join(\"\\n \");\r\n        reject(\r\n          `\"${endpoint}\" is an invalid endpoint. Try getting data from: \\n ${validEndpoints}`\r\n        );\r\n      }\r\n      // console.log(Data[endpoint]);\r\n\r\n      const response = { status: 200, data: Data[endpoint] };\r\n\r\n      resolve(response);\r\n    }, delay);\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}